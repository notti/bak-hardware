<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <spirit:vendor>xilinx.com</spirit:vendor>
  <spirit:library>customized_ip</spirit:library>
  <spirit:name>fft</spirit:name>
  <spirit:version>1.0</spirit:version>
  <spirit:busInterfaces>
    <spirit:busInterface>
      <spirit:name>nfft_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>nfft</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>clk_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>clk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="immediate" spirit:id="BUSIFPARAM_VALUE.CLK_INTF.ASSOCIATED_BUSIF">ovflo11:ovflo10:ovflo9:ovflo8:ovflo7:ovflo6:ovflo5:ovflo4:ovflo3:ovflo2:ovflo1:ovflo0:blk_exp11:blk_exp10:blk_exp9:blk_exp8:blk_exp7:blk_exp6:blk_exp5:blk_exp4:blk_exp3:blk_exp2:blk_exp1:blk_exp0:xk11_im:xk11_re:xk10_im:xk10_re:xk9_im:xk9_re:xk8_im:xk8_re:xk7_im:xk7_re:xk6_im:xk6_re:xk5_im:xk5_re:xk4_im:xk4_re:xk3_im:xk3_re:xk2_im:xk2_re:xk1_im:xk1_re:xk0_im:xk0_re:ovflo:blk_exp:xk_im:xk_re:rfs:cpv:xk_index:dv:done:edone:busy:xn_index:rfd:scale_sch11_we:scale_sch11:scale_sch10_we:scale_sch10:scale_sch9_we:scale_sch9:scale_sch8_we:scale_sch8:scale_sch7_we:scale_sch7:scale_sch6_we:scale_sch6:scale_sch5_we:scale_sch5:scale_sch4_we:scale_sch4:scale_sch3_we:scale_sch3:scale_sch2_we:scale_sch2:scale_sch1_we:scale_sch1:scale_sch0_we:scale_sch0:fwd_inv11_we:fwd_inv11:fwd_inv10_we:fwd_inv10:fwd_inv9_we:fwd_inv9:fwd_inv8_we:fwd_inv8:fwd_inv7_we:fwd_inv7:fwd_inv6_we:fwd_inv6:fwd_inv5_we:fwd_inv5:fwd_inv4_we:fwd_inv4:fwd_inv3_we:fwd_inv3:fwd_inv2_we:fwd_inv2:fwd_inv1_we:fwd_inv1:fwd_inv0_we:fwd_inv0:xn11_im:xn11_re:xn10_im:xn10_re:xn9_im:xn9_re:xn8_im:xn8_re:xn7_im:xn7_re:xn6_im:xn6_re:xn5_im:xn5_re:xn4_im:xn4_re:xn3_im:xn3_re:xn2_im:xn2_re:xn1_im:xn1_re:xn0_im:xn0_re:scale_sch_we:scale_sch:fwd_inv_we:fwd_inv:xn_im:xn_re:cp_len_we:cp_len:unload:start:nfft_we:nfft</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="immediate" spirit:id="BUSIFPARAM_VALUE.CLK_INTF.ASSOCIATED_RESET">sclr</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_CLKEN</spirit:name>
          <spirit:value spirit:resolve="immediate" spirit:id="BUSIFPARAM_VALUE.CLK_INTF.ASSOCIATED_CLKEN">ce</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sclr_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>sclr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:resolve="immediate" spirit:id="BUSIFPARAM_VALUE.SCLR_INTF.POLARITY">ACTIVE_LOW</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ce_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="clockenable" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="clockenable_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ce</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>nfft_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>nfft_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>start_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>start</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>unload_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>unload</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>cp_len_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>cp_len</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>cp_len_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>cp_len_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn0_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn0_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn0_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn0_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn1_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn1_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn1_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn1_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn2_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn2_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn2_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn2_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn3_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn3_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn3_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn3_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn4_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn4_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn4_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn4_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn5_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn5_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn5_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn5_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn6_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn6_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn6_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn6_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn7_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn7_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn7_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn7_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn8_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn8_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn8_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn8_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn9_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn9_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn9_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn9_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn10_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn10_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn10_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn10_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn11_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn11_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn11_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn11_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv0_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv0_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv0_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv1_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv1_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv1_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv2_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv2_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv2_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv3_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv3_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv3_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv4_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv4</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv4_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv4_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv5_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv5</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv5_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv5_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv6_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv6</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv6_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv6_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv7_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv7</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv7_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv7_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv8_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv8</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv8_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv8_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv9_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv9</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv9_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv9_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv10_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv10</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv10_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv10_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv11_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv11</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>fwd_inv11_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>fwd_inv11_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch0_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch0_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch0_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch1_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch1_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch1_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch2_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch2_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch2_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch3_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch3_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch3_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch4_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch4</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch4_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch4_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch5_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch5</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch5_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch5_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch6_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch6</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch6_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch6_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch7_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch7</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch7_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch7_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch8_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch8</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch8_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch8_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch9_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch9</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch9_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch9_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch10_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch10</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch10_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch10_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch11_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch11</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>scale_sch11_we_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>scale_sch11_we</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rfd_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rfd</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xn_index_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xn_index</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>busy_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>busy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>edone_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>edone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>done_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>done</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>dv_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>dv</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk_index_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk_index</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>cpv_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>cpv</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rfs_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rfs</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk0_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk0_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk0_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk0_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk1_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk1_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk1_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk1_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk2_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk2_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk2_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk2_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk3_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk3_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk3_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk3_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk4_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk4_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk4_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk4_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk5_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk5_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk5_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk5_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk6_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk6_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk6_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk6_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk7_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk7_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk7_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk7_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk8_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk8_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk8_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk8_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk9_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk9_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk9_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk9_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk10_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk10_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk10_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk10_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk11_re_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk11_re</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>xk11_im_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>xk11_im</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp0_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp1_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp2_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp3_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp4_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp4</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp5_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp5</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp6_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp6</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp7_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp7</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp8_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp8</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp9_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp9</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp10_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp10</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>blk_exp11_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>blk_exp11</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo0_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo1_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo2_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo3_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo4_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo4</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo5_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo5</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo6_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo6</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo7_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo7</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo8_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo8</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo9_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo9</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo10_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo10</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>ovflo11_intf</spirit:name>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="common" spirit:name="data_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>ovflo11</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
  </spirit:busInterfaces>
  <spirit:model>
    <spirit:views>
      <spirit:view>
        <spirit:name>xilinx_miscfiles</spirit:name>
        <spirit:displayName>Miscellaneous</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:misc.files</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_miscfiles_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>1487972402</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguagesynthesis</spirit:name>
        <spirit:displayName>Synthesis</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:synthesis</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagesynthesis_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>1487972402</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguagebehavioralsimulation</spirit:name>
        <spirit:displayName>Simulation</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:simulation</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>1487972402</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguageinstantiationtemplate</spirit:name>
        <spirit:displayName>Instantiation Template</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:synthesis.template</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguageinstantiationtemplate_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>customizationCRC</spirit:name>
            <spirit:value>1487972402</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>customizationCRCversion</spirit:name>
            <spirit:value>1</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
    </spirit:views>
    <spirit:ports>
      <spirit:port>
        <spirit:name>clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>ce</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_CE&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sclr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCLR&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>nfft</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NFFT&apos;)) = 1) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) > 6)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) != 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) > 3)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>nfft_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NFFT&apos;)) = 1) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) > 6)) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) != 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) > 3)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>start</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>unload</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) != 3) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NATURAL_OUTPUT&apos;)) = 1 and spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NATURAL_INPUT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NATURAL_OUTPUT&apos;)) = 0 and spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NATURAL_INPUT&apos;)) = 0)) )">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>cp_len</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - 1)">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_CYCLIC_PREFIX&apos;)) = 1 and spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NATURAL_OUTPUT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>cp_len_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_CYCLIC_PREFIX&apos;)) = 1 and spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NATURAL_OUTPUT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0) and not((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FLT_PT&apos;))) = 1)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0) and not((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FLT_PT&apos;))) = 1)">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn0_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn0_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn1_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn1_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn2_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn2_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn3_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn3_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn4_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn4_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn5_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn5_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn6_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn6_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn7_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn7_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn8_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn8_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn9_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn9_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn10_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn10_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn11_re</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn11_im</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv0_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv1_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv2_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv3_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv4</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv4_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv5</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv5_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv6</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv6_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv7</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv7_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv8</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv8_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv9</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv9_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv10</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv10_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv11</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>fwd_inv11_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch0_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch1_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch2_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch3_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch4</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch4_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch5</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch5_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch6</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch6_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch7</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch7_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch8</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch8_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch9</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch9_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch10</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch10_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch11</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) *2)-((spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - (spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) mod 2)) * ( spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) mod 2))-1">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>scale_sch11_we</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0x0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rfd</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>xn_index</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - 1)">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>busy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>edone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>done</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>dv</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk_index</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_NFFT_MAX&apos;)) - 1)">9</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>cpv</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_CYCLIC_PREFIX&apos;)) = 1 and spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NATURAL_OUTPUT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rfs</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_CYCLIC_PREFIX&apos;)) = 1 and spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_NATURAL_OUTPUT&apos;)) = 1 and spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 3)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) = 1) or (not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 1) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 2) and not((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 4))) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0) or ((((spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;))))) = 3))) or spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FLT_PT&apos;))=1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk0_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk0_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk1_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk1_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk2_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk2_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk3_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk3_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk4_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk4_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk5_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk5_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk6_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk6_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk7_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk7_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk8_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk8_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk9_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk9_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk10_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk10_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk11_re</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>xk11_im</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_OUTPUT_WIDTH&apos;)) - 1)">15</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp4</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp5</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp6</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp7</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp8</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp9</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp10</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>blk_exp11</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="immediate">4</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="immediate">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) > 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 2) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 3) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 4) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo4</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 5) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo5</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 6) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo6</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 7) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo7</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 8) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo8</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 9) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo9</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 10) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo10</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 11) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ovflo11</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:presence>optional</xilinx:presence>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_CHANNELS&apos;)) >= 12) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 1 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 2 or spirit:decode(id(&apos;MODELPARAM_VALUE.C_ARCH&apos;)) = 4)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_OVFLO&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_SCALING&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_BFP&apos;)) = 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
    </spirit:ports>
    <spirit:modelParameters>
      <spirit:modelParameter xsi:type="spirit:nameValueTypeType" spirit:dataType="string">
        <spirit:name>c_xdevicefamily</spirit:name>
        <spirit:value spirit:format="string" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_XDEVICEFAMILY">no_family</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_channels</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_CHANNELS">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_nfft_max</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_NFFT_MAX">10</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_arch</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_ARCH">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_nfft</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_NFFT">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_use_flt_pt</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_FLT_PT">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_input_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INPUT_WIDTH">16</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_twiddle_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_TWIDDLE_WIDTH">16</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_output_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_OUTPUT_WIDTH">16</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_scaling</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_SCALING">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_bfp</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_BFP">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_rounding</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_ROUNDING">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_ce</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_CE">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_sclr</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_SCLR">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_ovflo</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_OVFLO">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_natural_input</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_NATURAL_INPUT">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_natural_output</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_NATURAL_OUTPUT">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_has_cyclic_prefix</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HAS_CYCLIC_PREFIX">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_data_mem_type</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_DATA_MEM_TYPE">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_twiddle_mem_type</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_TWIDDLE_MEM_TYPE">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_bram_stages</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_BRAM_STAGES">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_reorder_mem_type</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_REORDER_MEM_TYPE">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_use_hybrid_ram</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_HYBRID_RAM">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_optimize_goal</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_OPTIMIZE_GOAL">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_cmpy_type</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_CMPY_TYPE">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_bfly_type</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_BFLY_TYPE">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_xn_data_offset</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_XN_DATA_OFFSET">0</spirit:value>
      </spirit:modelParameter>
    </spirit:modelParameters>
  </spirit:model>
  <spirit:choices>
    <spirit:choice>
      <spirit:name>choices_0</spirit:name>
      <spirit:enumeration>1</spirit:enumeration>
      <spirit:enumeration>2</spirit:enumeration>
      <spirit:enumeration>3</spirit:enumeration>
      <spirit:enumeration>4</spirit:enumeration>
      <spirit:enumeration>5</spirit:enumeration>
      <spirit:enumeration>6</spirit:enumeration>
      <spirit:enumeration>7</spirit:enumeration>
      <spirit:enumeration>8</spirit:enumeration>
      <spirit:enumeration>9</spirit:enumeration>
      <spirit:enumeration>10</spirit:enumeration>
      <spirit:enumeration>11</spirit:enumeration>
      <spirit:enumeration>12</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_1</spirit:name>
      <spirit:enumeration>8</spirit:enumeration>
      <spirit:enumeration>16</spirit:enumeration>
      <spirit:enumeration>32</spirit:enumeration>
      <spirit:enumeration>64</spirit:enumeration>
      <spirit:enumeration>128</spirit:enumeration>
      <spirit:enumeration>256</spirit:enumeration>
      <spirit:enumeration>512</spirit:enumeration>
      <spirit:enumeration>1024</spirit:enumeration>
      <spirit:enumeration>2048</spirit:enumeration>
      <spirit:enumeration>4096</spirit:enumeration>
      <spirit:enumeration>8192</spirit:enumeration>
      <spirit:enumeration>16384</spirit:enumeration>
      <spirit:enumeration>32768</spirit:enumeration>
      <spirit:enumeration>65536</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_2</spirit:name>
      <spirit:enumeration>automatically_select</spirit:enumeration>
      <spirit:enumeration>pipelined_streaming_io</spirit:enumeration>
      <spirit:enumeration>radix_4_burst_io</spirit:enumeration>
      <spirit:enumeration>radix_2_burst_io</spirit:enumeration>
      <spirit:enumeration>radix_2_lite_burst_io</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_3</spirit:name>
      <spirit:enumeration>fixed_point</spirit:enumeration>
      <spirit:enumeration>floating_point</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_4</spirit:name>
      <spirit:enumeration>8</spirit:enumeration>
      <spirit:enumeration>9</spirit:enumeration>
      <spirit:enumeration>10</spirit:enumeration>
      <spirit:enumeration>11</spirit:enumeration>
      <spirit:enumeration>12</spirit:enumeration>
      <spirit:enumeration>13</spirit:enumeration>
      <spirit:enumeration>14</spirit:enumeration>
      <spirit:enumeration>15</spirit:enumeration>
      <spirit:enumeration>16</spirit:enumeration>
      <spirit:enumeration>17</spirit:enumeration>
      <spirit:enumeration>18</spirit:enumeration>
      <spirit:enumeration>19</spirit:enumeration>
      <spirit:enumeration>20</spirit:enumeration>
      <spirit:enumeration>21</spirit:enumeration>
      <spirit:enumeration>22</spirit:enumeration>
      <spirit:enumeration>23</spirit:enumeration>
      <spirit:enumeration>24</spirit:enumeration>
      <spirit:enumeration>25</spirit:enumeration>
      <spirit:enumeration>26</spirit:enumeration>
      <spirit:enumeration>27</spirit:enumeration>
      <spirit:enumeration>28</spirit:enumeration>
      <spirit:enumeration>29</spirit:enumeration>
      <spirit:enumeration>30</spirit:enumeration>
      <spirit:enumeration>31</spirit:enumeration>
      <spirit:enumeration>32</spirit:enumeration>
      <spirit:enumeration>33</spirit:enumeration>
      <spirit:enumeration>34</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_5</spirit:name>
      <spirit:enumeration>8</spirit:enumeration>
      <spirit:enumeration>9</spirit:enumeration>
      <spirit:enumeration>10</spirit:enumeration>
      <spirit:enumeration>11</spirit:enumeration>
      <spirit:enumeration>12</spirit:enumeration>
      <spirit:enumeration>13</spirit:enumeration>
      <spirit:enumeration>14</spirit:enumeration>
      <spirit:enumeration>15</spirit:enumeration>
      <spirit:enumeration>16</spirit:enumeration>
      <spirit:enumeration>17</spirit:enumeration>
      <spirit:enumeration>18</spirit:enumeration>
      <spirit:enumeration>19</spirit:enumeration>
      <spirit:enumeration>20</spirit:enumeration>
      <spirit:enumeration>21</spirit:enumeration>
      <spirit:enumeration>22</spirit:enumeration>
      <spirit:enumeration>23</spirit:enumeration>
      <spirit:enumeration>24</spirit:enumeration>
      <spirit:enumeration>25</spirit:enumeration>
      <spirit:enumeration>26</spirit:enumeration>
      <spirit:enumeration>27</spirit:enumeration>
      <spirit:enumeration>28</spirit:enumeration>
      <spirit:enumeration>29</spirit:enumeration>
      <spirit:enumeration>30</spirit:enumeration>
      <spirit:enumeration>31</spirit:enumeration>
      <spirit:enumeration>32</spirit:enumeration>
      <spirit:enumeration>33</spirit:enumeration>
      <spirit:enumeration>34</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_6</spirit:name>
      <spirit:enumeration>unscaled</spirit:enumeration>
      <spirit:enumeration>scaled</spirit:enumeration>
      <spirit:enumeration>block_floating_point</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_7</spirit:name>
      <spirit:enumeration>truncation</spirit:enumeration>
      <spirit:enumeration>convergent_rounding</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_8</spirit:name>
      <spirit:enumeration>no_offset</spirit:enumeration>
      <spirit:enumeration>three_cycle_offset</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_9</spirit:name>
      <spirit:enumeration>bit_reversed_order</spirit:enumeration>
      <spirit:enumeration>natural_order</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_10</spirit:name>
      <spirit:enumeration>block_ram</spirit:enumeration>
      <spirit:enumeration>distributed_ram</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_11</spirit:name>
      <spirit:enumeration>block_ram</spirit:enumeration>
      <spirit:enumeration>distributed_ram</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_12</spirit:name>
      <spirit:enumeration>block_ram</spirit:enumeration>
      <spirit:enumeration>distributed_ram</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_13</spirit:name>
      <spirit:enumeration>1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_14</spirit:name>
      <spirit:enumeration>use_luts</spirit:enumeration>
      <spirit:enumeration>use_mults_resources</spirit:enumeration>
      <spirit:enumeration>use_mults_performance</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choices_15</spirit:name>
      <spirit:enumeration>use_luts</spirit:enumeration>
      <spirit:enumeration>use_xtremedsp_slices</spirit:enumeration>
    </spirit:choice>
  </spirit:choices>
  <spirit:fileSets>
    <spirit:fileSet>
      <spirit:name>xilinx_miscfiles_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>fft.asy</spirit:name>
        <spirit:userFileType>asy</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>fft.sym</spirit:name>
        <spirit:userFileType>sym</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>fft.xco</spirit:name>
        <spirit:userFileType>xco</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagesynthesis_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>fft.ngc</spirit:name>
        <spirit:userFileType>ngc</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>fft.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>fft.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguageinstantiationtemplate_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>fft.vho</spirit:name>
        <spirit:userFileType>vhdlTemplate</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
  </spirit:fileSets>
  <spirit:description>The Fast Fourier Transform (FFT) is a computationally efficient algorithm for computing the Discrete Fourier Transform (DFT). The FFT Core can compute 8 to 65536-point forward or inverse complex transforms on up to 12 parallel channels. The input data is a vector of complex values represented as two&apos;s-complement numbers 8 to 34 bits wide or single precision floating point numbers 32 bits wide. The phase factors can be 8 to 34 bits wide. All memory is on-chip using either Block RAM or Distributed RAM. Three arithmetic types are available: full-precision unscaled, scaled fixed-point, and block-floating point. Several parameters are run-time configurable: the point size, the choice of forward or inverse transform, and the scaling schedule. Four architectures are available to provide a tradeoff between size and transform time.</spirit:description>
  <spirit:parameters>
    <spirit:parameter>
      <spirit:name>Component_Name</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.COMPONENT_NAME" spirit:order="1">fft</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>channels</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.CHANNELS" spirit:choiceRef="choices_0" spirit:order="2">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>transform_length</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.TRANSFORM_LENGTH" spirit:choiceRef="choices_1" spirit:order="3">4096</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>target_clock_frequency</spirit:name>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.TARGET_CLOCK_FREQUENCY" spirit:order="4" spirit:minimum="1" spirit:maximum="550">250</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>implementation_options</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.IMPLEMENTATION_OPTIONS" spirit:choiceRef="choices_2" spirit:order="5">pipelined_streaming_io</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>target_data_throughput</spirit:name>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.TARGET_DATA_THROUGHPUT" spirit:order="6" spirit:minimum="1" spirit:maximum="550">50</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>run_time_configurable_transform_length</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.RUN_TIME_CONFIGURABLE_TRANSFORM_LENGTH" spirit:order="7">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>data_format</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.DATA_FORMAT" spirit:choiceRef="choices_3" spirit:order="8">fixed_point</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>input_width</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.INPUT_WIDTH" spirit:choiceRef="choices_4" spirit:order="9">16</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>phase_factor_width</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.PHASE_FACTOR_WIDTH" spirit:choiceRef="choices_5" spirit:order="10">16</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>scaling_options</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.SCALING_OPTIONS" spirit:choiceRef="choices_6" spirit:order="11">scaled</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>rounding_modes</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.ROUNDING_MODES" spirit:choiceRef="choices_7" spirit:order="12">convergent_rounding</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>ce</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.CE" spirit:order="13">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>sclr</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.SCLR" spirit:order="14">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>ovflo</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.OVFLO" spirit:order="15">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>input_data_offset</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.INPUT_DATA_OFFSET" spirit:choiceRef="choices_8" spirit:order="16">three_cycle_offset</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>output_ordering</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.OUTPUT_ORDERING" spirit:choiceRef="choices_9" spirit:order="17">bit_reversed_order</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>cyclic_prefix_insertion</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.CYCLIC_PREFIX_INSERTION" spirit:order="18">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>memory_options_data</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.MEMORY_OPTIONS_DATA" spirit:choiceRef="choices_10" spirit:order="19">block_ram</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>memory_options_phase_factors</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.MEMORY_OPTIONS_PHASE_FACTORS" spirit:choiceRef="choices_11" spirit:order="20">block_ram</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>memory_options_reorder</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.MEMORY_OPTIONS_REORDER" spirit:choiceRef="choices_12" spirit:order="21">block_ram</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>number_of_stages_using_block_ram_for_data_and_phase_factors</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.NUMBER_OF_STAGES_USING_BLOCK_RAM_FOR_DATA_AND_PHASE_FACTORS" spirit:choiceRef="choices_13" spirit:order="22">3</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>memory_options_hybrid</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.MEMORY_OPTIONS_HYBRID" spirit:order="23">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>complex_mult_type</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.COMPLEX_MULT_TYPE" spirit:choiceRef="choices_14" spirit:order="24">use_mults_performance</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>butterfly_type</spirit:name>
      <spirit:value spirit:format="string" spirit:resolve="user" spirit:id="PARAM_VALUE.BUTTERFLY_TYPE" spirit:choiceRef="choices_15" spirit:order="25">use_xtremedsp_slices</spirit:value>
    </spirit:parameter>
  </spirit:parameters>
  <spirit:vendorExtensions>
    <xilinx:coreExtensions>
      <xilinx:supportedFamilies>
        <xilinx:family xilinx:lifeCycle="Pre-Production">virtex7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">qvirtex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">qvirtex7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">kintex7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">qkintex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">qkintex7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">artix7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">artix7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">aartix7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">qartix7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">qartix7l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">zynq</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">azynq</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">qzynq</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">virtex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">kintex7</xilinx:family>
      </xilinx:supportedFamilies>
      <xilinx:taxonomies>
        <xilinx:taxonomy>/Digital_Signal_Processing/Transforms/FFTs</xilinx:taxonomy>
      </xilinx:taxonomies>
      <xilinx:displayName>Fast Fourier Transform</xilinx:displayName>
      <xilinx:upgrades>
        <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:3.1</xilinx:canUpgradeFrom>
        <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:3.2</xilinx:canUpgradeFrom>
        <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:4.0</xilinx:canUpgradeFrom>
        <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:4.1</xilinx:canUpgradeFrom>
        <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:5.0</xilinx:canUpgradeFrom>
        <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:6.0</xilinx:canUpgradeFrom>
        <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:7.0</xilinx:canUpgradeFrom>
      </xilinx:upgrades>
      <xilinx:coreCreationDateTime>2015-04-09T11:12:21</xilinx:coreCreationDateTime>
    </xilinx:coreExtensions>
    <xilinx:coreProperties>
      <xilinx:supportedFamilies>
        <xilinx:family xilinx:lifeCycle="Pre-Production">Virtex7L</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">QVirtex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">QVirtex7L</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">Kintex7L</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">QKintex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">QKintex7L</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">Artix7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">Artix7L</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">AArtix7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">QArtix7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">QArtix7L</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">zynq</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">azynq</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Pre-Production">qzynq</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">spartan3</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">spartan3a</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">spartan3adsp</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">spartan3e</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">spartan6</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">spartan6l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qspartan6l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qspartan6</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">aspartan3</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">aspartan3a</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">aspartan3e</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">aspartan3adsp</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">aspartan6</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">virtex4</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qvirtex4</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qrvirtex4</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">virtex5</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qvirtex5</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qrvirtex5</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">virtex6</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qvirtex6l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">qvirtex6</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">virtex6l</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">Virtex7</xilinx:family>
        <xilinx:family xilinx:lifeCycle="Production">Kintex7</xilinx:family>
      </xilinx:supportedFamilies>
      <xilinx:customization>
        <xilinx:customizer>Spirit</xilinx:customizer>
        <xilinx:elaborator>Sim</xilinx:elaborator>
        <xilinx:customizationTarget>xfft_v7.1.class</xilinx:customizationTarget>
        <xilinx:guiType>Cpp</xilinx:guiType>
        <xilinx:upgrades>
          <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:3.1</xilinx:canUpgradeFrom>
          <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:3.2</xilinx:canUpgradeFrom>
          <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:4.0</xilinx:canUpgradeFrom>
          <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:4.1</xilinx:canUpgradeFrom>
          <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:5.0</xilinx:canUpgradeFrom>
          <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:6.0</xilinx:canUpgradeFrom>
          <xilinx:canUpgradeFrom>xilinx.com:ip:xfft:7.0</xilinx:canUpgradeFrom>
        </xilinx:upgrades>
      </xilinx:customization>
      <xilinx:generation>
        <xilinx:generationFlow>Spirit</xilinx:generationFlow>
        <xilinx:deliverSimulationModel>true</xilinx:deliverSimulationModel>
        <xilinx:forceStructuralVhdlModel>true</xilinx:forceStructuralVhdlModel>
        <xilinx:forceStructuralVerilogModel>true</xilinx:forceStructuralVerilogModel>
        <xilinx:keepCxdevicefamilyInCoreWrapperHdl>true</xilinx:keepCxdevicefamilyInCoreWrapperHdl>
        <xilinx:synthesisRunOptions>
          <xilinx:option xilinx:resolve="immediate">-flow coregen</xilinx:option>
          <xilinx:option xilinx:resolve="immediate">-use_new_parser YES</xilinx:option>
          <xilinx:option xilinx:resolve="immediate">-bram_utilization_ratio -1</xilinx:option>
        </xilinx:synthesisRunOptions>
      </xilinx:generation>
      <xilinx:display>
        <xilinx:displayName>Fast Fourier Transform</xilinx:displayName>
        <xilinx:ipType>Spirit</xilinx:ipType>
        <xilinx:coreCreationDateTime>2015-04-09T11:12:21</xilinx:coreCreationDateTime>
        <xilinx:taxonomies>
          <xilinx:taxonomy>/Digital_Signal_Processing/Transforms/FFTs</xilinx:taxonomy>
        </xilinx:taxonomies>
      </xilinx:display>
    </xilinx:coreProperties>
    <xilinx:packagingInfo>
      <xilinx:xilinxVersion>2012.3.0</xilinx:xilinxVersion>
    </xilinx:packagingInfo>
  </spirit:vendorExtensions>
</spirit:component>
